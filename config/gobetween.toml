#
# gobetween.toml - sample config file
#
# @author Yaroslav Pogrebnyak <yyyaroslav@gmail.com>
#

#
# Global configurations
#

#
# Contains logging configuration
#
[logging]

level = "warn"    # "debug" | "info" | "warn" | "error"
output = "stdout" # "stdout" | "stderr" | "/path/to/gobetween.log"


#
# Contains defaults that could be overriden in servers sections.
# All *_timeout values have the following format:
# <int><duration> where duration can be 'ms', 's', 'm', 'h'
# Example: backend_connection_timeout = "5s"
# 0 - means no limit
#
[defaults] 

# Maximum simultaneous connections to the server
max_connections = 0

# Client inactivity duration till connection drop
client_idle_timeout = "0"

# Backend inactivity duration till connection drop
backend_idle_timeout = "0"

# Backend connection timeout
backend_connection_timeout = "0"

#
# Contains as many servers sections as needed
#
[servers]

# ------------------------------------------------- #

##
## Example server section.
##

#[servers.default]
#
#bind = "localhost:3000"     #  (required) "<host>:<port>"
#protocol = "tcp"            #  (required) "tcp"
#balance = "weight"          #  (optional [weight]) "weight" | "leastconn" | "roundrobin" | "iphash"
#
## -------------------- defaults overrides ------------------- #
#max_connections = 0
#client_idle_timeout = "10m"
#backend_idle_timeout = "10m"
#backend_connection_timeout = "5s"
#
#
## -------------------- healthchecks ------------------------- #
#
#  [servers.default.healthcheck]   # (optional)
#  interval = "2s"                 # (required) healthcheck running interval
#  timeout = "0s"                  # (required) max time for healthcheck to execute until mark as failed
#  fails = 1                       # (optional) successfull checks to mark backend as inactive
#  passes = 1                      # (optional) successfull checks to mark backend as active
#
#  # -- ping -- #
#  kind = "ping"
#
#  # -- exec -- #
#  kind = "exec"
#  exec_command = "/path/to/healthcheck.sh"      # (required) command to execute
#  exec_expected_positive_output = "1"           # (required) expected output of command in case of success
#  exec_expected_negative_output = "0"           # (required) expected output of command in case of failure
#
#
## -------------------- discovery ---------------------------- #
#
#  [servers.default.discovery]      # (required)
#  failpolicy = "keeplast"          # (optional) "keeplast" | "setempty" - what to do with backends if discovery fails
#  interval = "0s"                  # (required) backends cache invalidation interval; 0 means never.
#  timeout = "5s"                   # (optional) max time to wait for discover until falling to failpolicy
#
#  # -- static -- #
#  kind = "static"
#  static_list = [                  #  (required)  [
#      "localhost:8000 weight=5",   #    "<host>:<port> weight=<int>" weight=1 by default
#      "localhost:8001"             #  ]
#  ]
#
#  # -- srv -- #
#  kind = "srv"
#  srv_lookup_server = "some.server:53"   # (required) "<host:port>"
#  srv_lookup_pattern = "some.service."   # (required) lookup service
#
#  # -- docker -- #
#  kind = "docker"
#  docker_endpoint = "http://localhost:2375" # (required) Endpoint to docker API
#  docker_container_label = "proxied=true"   # (optional) Label to filter containers
#  docker_container_private_port = 80        # (required) Private port of container to use
#
#  # -- json -- #
#  # JSON discovery will be in format [{...}, ...] and path to host, port and other options you can describe in
#  # keys like json_port_pattern. By default this options set on first level of object, so you can dicsover from json
#  # like this [{"host": "0.0.0.0", "port": "1231", "weight": 1, "priority": 1},... ] without any additional settings
#  kind = "json"
#  json_endpoint = "http://localhost:8080"         # (required) JSON discovery Url
#  json_host_pattern = "some.level.host"           # (optional) path to host value in JSON object, by default "host"
#  json_port_pattern = "some.level.port"           # (optional) path to port value in JSON object, by default "port"
#  json_weight_pattern = "some.level.weight"       # (optional) path to weight value in JSON object, by default "weight"
#  json_priority_pattern = "some.level.priority"   # (optional) path to priority value in JSON object, by default "priority"
#
#  # -- exec -- #
#  # Exec discovery will run external script every 'exec_cache_ttl' interval, reading it's
#  # stdout and parsing it. Expected stdout of the script (\n is needed after each line):
#  # host1:port1 weight=N    (weight is optional)
#  # host2:port2 weight=N
#  # ...
#  kind = "exec"
#  exec_command = ["/path/to/script", "arg1", "arg2"] # (required) command to exec and variable-length arguments
#
#  # -- plaintext -- #
#  # Plain text discovery works on regexp. It parce strings separated by \n(new line symbol)
#  # All necessary values like host, port etc will get from named captured groups
#  # There are next captured groups must be used in regexp:
#  # (?P<host>...),
#  # (?P<port>...),
#  # (?P<weight>...),
#  # (?P<priority>...)
#  # All another captured groups will be ignored
#  # As default regexp plain discovery use (?P<host>\S+):(?P<port>\d+)(\sweight=(?P<weight>\d+))?(\spriority=(?P<priority>\d+)),
#  # so you can use responce like "0.0.0.0:1234, weight=0, priority=1/n0.0.0.0:4321 weight=1 priority=0"
#  kind = "plain"
#  plaintext_endpoint = "http://some.url.com"   # (required) Url to plain text discovery
#  plaintext_regex_pattern = ""                 # (optional) Regex with named capturing groups
#


# ------------------------------------------------- #


[servers.sample]
bind = "localhost:3000"
protocol = "tcp"
balance = "weight"

max_connections = 10
client_idle_timeout = "5s"
backend_idle_timeout = "5s"
backend_connection_timeout = "2s"

  [servers.sample.healthcheck]
  kind = "ping"
  interval = "1s"
  timeout = "500ms"
  fails = 3
  passes = 3

  [servers.sample.discovery]
  kind = "static"
  static_list = [
    "localhost:8000 weight=1",
    "localhost:8001 weight=2"
  ]


